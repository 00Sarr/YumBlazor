@page "/category"
@inject ICategoryRepository _categoryRepo
@inject IJSRuntime _JS

<YumBlazor.Components.Pages.Shared.BsModal OnModalDeleteConfirmation="ConfirmDelete"></YumBlazor.Components.Pages.Shared.BsModal>
@if (isBusy)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ms-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Category List</h2>
                </div>
            </div>
        </div>
        <div class="card-body pt-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="category/create" class="btn btn-lg btn-secondary" style="width:250px;">
                        <i class="bi bi-plus-square"></i> Add New Category
                    </a>
                </div>
            </div>
            @if (Categories.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>.</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Categories)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>
                                    <a href="category/update/@item.Id" class="btn btn-primary"><i class="bi bi-pencil-square"></i> Edit</a>
                                    <button class="btn btn-danger" @onclick="()=>HandleDelete(item.Id)"><i class="bi bi-pencil-square"></i> Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}
@code {
    bool isBusy { get; set; } = true;
    IEnumerable<Category> Categories { get; set; } = new List<Category>();
    int DeleteCatId { get; set; }
    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
            isBusy = false;
            StateHasChanged();
        }

    }

    async Task LoadCategories()
    {
        Categories = await _categoryRepo.GetAllAsync();
    }
    void HandleDelete(int id)
    {
        DeleteCatId = id;
        _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    public async Task ConfirmDelete(bool Result)
    {
        isBusy = true;
        await _JS.InvokeVoidAsync("HideConfirmationModal");
        if (Result && DeleteCatId != 0)
        {
            bool res = await _categoryRepo.DeleteAsync(DeleteCatId);
            if (res)
                await _JS.ToastrSuccess("Category Deleted Successfuly!");
            else
                await _JS.ToastrError("Error Encountered while deleting!");
            await LoadCategories();
        }
        DeleteCatId = 0;
        isBusy = false;

    }
}
