@page "/category/create"
@page "/category/update/{id:int}"
@inject ICategoryRepository _category
@inject NavigationManager _navigation
@inject IJSRuntime _JS

@if (isBusy)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ms-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id > 0 ? "Update" : "Create") Category </h2>
                </div>
            </div>
        </div>
        <div class="card-body pt-4">
            <EditForm Model="Category" FormName="CategoryUpsertForm" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />
                <div class="border p-2 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value=Category.Name class="form-control" id="name" placeholder="Name" />
                        <label for="name">Name</label>
                        <ValidationMessage For="@(()=>Category.Name)" />
                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@isBusy">
                                <i class="bi bi-floppy2-fill"></i> Update
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="category" class="btn btn-secondary form-control" disabled="@isBusy">
                                <i class="bi bi-arrow-bar-left"></i> Go To List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}
@code {
    bool isBusy { get; set; } = true;

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    Category Category { get; set; } = new Category();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategory();
            isBusy = false;
            StateHasChanged();
        }
    }

    async Task LoadCategory()
    {
        if (Id > 0)
            Category = await _category.GetAsync(Id);
    }

    async Task UpsertCategory()
    {
        isBusy = true;
        if (Category.Id != 0)
        {
            await _category.UpdateAsync(Category);
            await _JS.ToastrSuccess("Category Updated Successfully!");
        }
        else
        {
            await _category.CreateAsync(Category);
            await _JS.ToastrSuccess("Category Inserted Successfully!");
        }
        isBusy = false;
        _navigation.NavigateTo("Category");
    }
}
